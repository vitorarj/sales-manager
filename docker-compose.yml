version: "3.8"

services:
  postgres:
    image: postgres:15-alpine
    container_name: salesdb
    environment:
      POSTGRES_DB: salesdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - sales-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: sales-backend
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/salesdb
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - JWT_SECRET=minha-chave-secreta-super-forte-2024
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - sales-network
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: sales-frontend
    environment:
      - REACT_APP_API_URL=http://localhost:8080/api
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - sales-network
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  sales-network:
    driver: bridge
