name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ${{ github.repository }}-backend
  IMAGE_NAME_FRONTEND: ${{ github.repository }}-frontend

jobs:
  # ===============================
  # STAGE 1: BUILD & TEST
  # ===============================
  build-and-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: salesdb_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      # Backend Build & Test
      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make gradlew executable
        run: chmod +x ./backend/gradlew

      - name: Build Backend
        run: |
          cd backend
          ./gradlew clean build -x test

      - name: Run Backend Tests
        run: |
          cd backend
          ./gradlew test
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/salesdb_test
          SPRING_DATASOURCE_USERNAME: postgres
          SPRING_DATASOURCE_PASSWORD: postgres

      # Frontend Build & Test
      - name: Install Frontend Dependencies
        run: |
          cd frontend
          npm ci

      - name: Run Frontend Tests
        run: |
          cd frontend
          npm test -- --coverage --watchAll=false

      - name: Build Frontend
        run: |
          cd frontend
          npm run build

      # Upload artifacts
      - name: Upload Backend JAR
        uses: actions/upload-artifact@v3
        with:
          name: backend-jar
          path: backend/build/libs/*.jar

      - name: Upload Frontend Build
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: frontend/build/

  # ===============================
  # STAGE 2: DOCKER BUILD
  # ===============================
  docker-build:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (backend)
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Extract metadata (frontend)
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ===============================
  # STAGE 3: DEPLOY TO PRODUCTION
  # ===============================
  deploy:
    needs: [build-and-test, docker-build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Render
        run: |
          # Deploy usando Render API ou manual via GitHub integration
          echo "Deploy configurado via GitHub integration no Render"
          echo "URLs ser√£o: https://sales-backend.onrender.com e https://sales-frontend.onrender.com"

    # Alternativa: Deploy para Google Cloud Run
    # - name: Deploy to Cloud Run
    #   uses: google-github-actions/deploy-cloudrun@v1
    #   with:
    #     service: sales-management-backend
    #     image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:latest
    #     region: us-central1

  # ===============================
  # STAGE 4: POST-DEPLOY TESTS
  # ===============================
  post-deploy-tests:
    needs: deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Wait for deployment
        run: sleep 60

      - name: Health Check Backend
        run: |
          curl -f https://sales-management-backend.onrender.com/health || exit 1

      - name: Health Check Frontend
        run: |
          curl -f https://sales-management-frontend.onrender.com/ || exit 1

      - name: API Integration Test
        run: |
          # Teste b√°sico da API
          response=$(curl -s -o /dev/null -w "%{http_code}" https://sales-management-backend.onrender.com/api/auth/users-for-login)
          if [ $response -eq 200 ]; then
            echo "API est√° respondendo corretamente"
          else
            echo "API falhou com c√≥digo $response"
            exit 1
          fi

  # ===============================
  # NOTIFICATIONS
  # ===============================
  notify:
    needs: [deploy, post-deploy-tests]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Notify Success
        if: ${{ needs.deploy.result == 'success' && needs.post-deploy-tests.result == 'success' }}
        run: |
          echo "üöÄ Deploy realizado com sucesso!"
          echo "Backend: https://sales-management-backend.onrender.com"
          echo "Frontend: https://sales-management-frontend.onrender.com"

      - name: Notify Failure
        if: ${{ needs.deploy.result == 'failure' || needs.post-deploy-tests.result == 'failure' }}
        run: |
          echo "‚ùå Deploy falhou! Verifique os logs."
          exit 1
